/* Generated by Together */

package impl.miw.business.shareholdermanager;

import impl.miw.presentation.participeproject.ParticipeProjectAction;

import java.util.Vector;

import com.miw.business.ShareholderManagerService;
import com.miw.infrastructure.log.LogService;
import com.miw.model.Project;
import com.miw.model.Shareholder;
import com.miw.persistence.ProjectDataService;
import com.miw.persistence.ShareholderDataService;

public class ShareholderManager implements ShareholderManagerService {

	private ShareholderDataService shareholderDataService;
	private ProjectDataService projectDataService;
	private LogService log;
	private int newShareholder = 0;

	public LogService getLog() {
		return log;
	}

	public void setLog(LogService log) {
		this.log = log;
	}

	public ShareholderDataService getShareholderDataService() {
		return shareholderDataService;
	}

	public void setShareholderDataService(
			ShareholderDataService shareholderDataService) {
		this.shareholderDataService = shareholderDataService;
	}

	public ProjectDataService getProjectDataService() {
		return projectDataService;
	}

	public void setProjectDataService(ProjectDataService projectDataService) {
		this.projectDataService = projectDataService;
	}

	@Override
	public Vector<Shareholder> getShareholders() throws Exception {
		log.debug("Entrando en getShareholders");
		Vector<Shareholder> shareholders = shareholderDataService
				.getShareholders();

		return shareholders;
	}

	@Override
	public String setShareholder(ParticipeProjectAction participeProjectAction)
			throws Exception {
		log.debug("Entrando en setShareholders");

		String status = shareholderDataService
				.setShareholder(participeProjectAction);
		return status;
	}

	public String setPendiente(int id, Vector<Project> projects,
			Vector<Shareholder> shares) throws Exception {

		log.debug("Entrando en setPendiente");
		Double fee = 0.0;
		String idProyecto = "";

		for (int i = 0; i < shares.size(); i++) {
			if (shares.get(i).getId() == id) {
				fee = shares.get(i).getDinero();
				idProyecto = shares.get(i).getIdProyecto();
				break;
			}
		}

		Double coste = 0.0;
		Double percent = 0.0;

		for (int i = 0; i < projects.size(); i++) {
			if (projects.get(i).getTitulo().equals(idProyecto)) {
				coste = projects.get(i).getCoste();
				percent = projects.get(i).getPorcentaje();
				break;
			}
		}

		Double newPercent = calcularNewPercentProject(fee, coste, percent);

		String status = projectDataService.setPercent(newPercent,
				newShareholder, idProyecto);
		status += ", ";
		status += shareholderDataService.setPendiente(id);
		return status;
	}

	private Double calcularNewPercentProject(Double fee, Double coste,
			Double percent) {
		Double newPrice = (percent / 100) * coste;
		newPrice += fee;
		Double newPercent = (newPrice * 100) / coste;

		newShareholder = (int) ((coste - newPrice) / 100);

		return newPercent;
	}
}
